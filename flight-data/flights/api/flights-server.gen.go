// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Kong/KongAir/flight-data/flights/api/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get KongAir planned flights
	// (GET /flights)
	GetFlights(ctx echo.Context, params GetFlightsParams) error
	// Get a specific flight by flight number
	// (GET /flights/{flightNumber})
	GetFlightByNumber(ctx echo.Context, flightNumber string) error
	// Fetch more details about a flight
	// (GET /flights/{flightNumber}/details)
	GetFlightDetails(ctx echo.Context, flightNumber string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFlights converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlights(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlightsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlights(ctx, params)
	return err
}

// GetFlightByNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlightByNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "flightNumber" -------------
	var flightNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "flightNumber", runtime.ParamLocationPath, ctx.Param("flightNumber"), &flightNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flightNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlightByNumber(ctx, flightNumber)
	return err
}

// GetFlightDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlightDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "flightNumber" -------------
	var flightNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "flightNumber", runtime.ParamLocationPath, ctx.Param("flightNumber"), &flightNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flightNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlightDetails(ctx, flightNumber)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/flights", wrapper.GetFlights)
	router.GET(baseURL+"/flights/:flightNumber", wrapper.GetFlightByNumber)
	router.GET(baseURL+"/flights/:flightNumber/details", wrapper.GetFlightDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTY/bNhD9K8S0hxaQba2zBRrdUqRugiySYjenrhcGLY1sphKpDEduDUP/vSBF2d6V",
	"7HjTHopcbEKcj8eZ9zjcQWrKymjUbCHZgU3XWEq/nBVqtWa3qshUSKzQf9d1uURyK95WCAlYJqVX0ERA",
	"pmZcqGxw04XO6gKzhSRSG1k4q9xQKRkSyCTjiFWJEJ1zzbCSxDXhpc4OFX6uFWEGyX0H/gjqcPQhuA/7",
	"4Gb5CVN2yNoivUaWqrD9WklFKcmcF63jQFVyH2BxpqhKL4IRakZiqXSJmo9sl8YUKLUzLlEWC1OxMtoD",
	"UIylHQwbPkgiue2V6TGq0xh8Qr1PGD05cL9ijT9QbhykDG1KyrtCAu+MXr1SJNqKWmGRNipFUZHZqAyt",
	"4DWKfVNEHsxyQyK4uuYrLly6LshdGwQi2CDZNlE8vhrHrgKmQi0rBQm8GMfjGCKoJK99tSYhvFuvkPto",
	"b5Fr0lbIojgDTIqV2qAWmdzONfiMJF2Etxkk8BtywOlTkyyRkSwk90+zzVTBSGK5FY7p4ocMc1kXbAUb",
	"kdZEqNnl+NF3ChL4XCNtIQItSwzyCIwuZU84g4Ljra+jM4TmwZHDVkbbltXTOHZ/qdEciCirqlCpP9rk",
	"k3WYd4B/y7IqWo9f2/W+uTfKer+NLGqX536uhRA7/yvEPMh0DomYw7vXL6fXc4j2m5102+2bN7eju9mH",
	"Y4MBQbe203h6PYpfjKbxx/hlcjVNpj//MewYNN9zuzq4ea8m+gLyn04jv5t9GN28uX0e8quvQ37VRz7X",
	"D3PtlX8gxv66+J4whwS+mxzGwyTMhkkYDP07pIme8PauTlO0Nq8L0RIIxV+K1321tDDqspS0bZXRiVpU",
	"hdT6yDIClit7uKRGmWQJDy5Ap9rJrl28971ovixiYStMVa7SkCXIVjkZtx9CW8+I+Jft++62PKvlj2t8",
	"HLQTrbt8Dpo9PgEcX85MNR637KR2rXKS++/VK7wgj9Xr2X9atOcV+3VyfbZWmx7XL6H4BZS2gdNuCrgu",
	"oeU9W107ruPrC8p9gPX4AVGitXI19HRoBmfrk7kReGZY5KbW2YDM+txfbnv8fK7iJtnhQTSovBlyuhal",
	"IRTBVMilqR2cULmTOuveWt+GzJ5Dx+7k/5aVXcn/5+y8hCMniOniIG2GmdENlle/v/XvQ9/4mgpIYM1c",
	"2WQykZUa/2n0aiQVjVPjnkDNPwEAAP//dVw4PSoNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
