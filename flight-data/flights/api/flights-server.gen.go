// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Kong/KongAir/flight-data/flights/api/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get KongAir planned flights
	// (GET /flights)
	GetFlights(ctx echo.Context, params GetFlightsParams) error
	// Get a specific flight by flight number
	// (GET /flights/{flightNumber})
	GetFlightByNumber(ctx echo.Context, flightNumber string) error
	// Fetch more details about a flight
	// (GET /flights/{flightNumber}/details)
	GetFlightDetails(ctx echo.Context, flightNumber string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetFlights converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlights(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFlightsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlights(ctx, params)
	return err
}

// GetFlightByNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlightByNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "flightNumber" -------------
	var flightNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "flightNumber", runtime.ParamLocationPath, ctx.Param("flightNumber"), &flightNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flightNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlightByNumber(ctx, flightNumber)
	return err
}

// GetFlightDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFlightDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "flightNumber" -------------
	var flightNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "flightNumber", runtime.ParamLocationPath, ctx.Param("flightNumber"), &flightNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter flightNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFlightDetails(ctx, flightNumber)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/flights", wrapper.GetFlights)
	router.GET(baseURL+"/flights/:flightNumber", wrapper.GetFlightByNumber)
	router.GET(baseURL+"/flights/:flightNumber/details", wrapper.GetFlightDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTY/bNhD9K8S0hxbw2lpnCzS6pUi3DRKkRZJT1wuDlkY2U4lkhiO3xkL/veCHbCeS",
	"Xe+2h6IXm6Dmk/PeIx+gMI01GjU7yB/AFRtsZFje1mq9Yb+yZCwSKwz7um1WSH7FO4uQg2NSeg3dBMi0",
	"jEOPEh0rLVkZPepmSK3V2Kdu0u+Y1Ucs2Bv7Csu2xnIpidRW1t6vMtRIhhxKyXjFqkGYDPMcXEu0krgl",
	"vNTZN4efWkVYQn7Xn0Hf8XjosVrvRzqKB/0SWaraDU9PKipIVryMjiPnV4UAyzODUXqZjFAzEkulG9R8",
	"ZLsypkapvXGDsl4a68cVClCMjRsNmzYkkdyNTasLqSuTQFCQshEE8Nro9QtFIvbuhEPaqgKFJbNVJTrB",
	"GxT74xNVMqsMieTqZ6S49un6IO9jEJjAFsnFRNn0epoFkFnU0irI4dk0m2YwASt5E/qapfB+vUYeVvsO",
	"uSXthKzrM4VJsVZb1KKUu4WGkJEC6F+VkMNPyKnOkJpkg4zkIL/7MtutqhlJrHbCA1J8U2Il25qdYCOK",
	"lgg1+xzfgj9cyOFTi7SDCWjZYEJxwl4jB/ge5QXvwjl6Q+juPdSdNdpF/M2zzP8VRnOCjLS2VkVobfbR",
	"RVLjn7KxdfT4Ma73w32jXPDbyrr1ee4WWgjxEH6FWCQ2LSAXC3j98vn8ZgGT/cfAMP+tt/ebUTGix5uf",
	"3x3s/ccjuYkW729/WUAy6A6RRzgb7efZ/OYqe3Y1zz5kz/PreT7//rfjkga0HrhdH9yCV8p6uuXvHtVy",
	"aOhsy+FQntLy9dNavh62vND3Cx1U4QDFvZR8TVhBDl/NDtfPLN09s3TxDPWlm3zBlPdtUaBzVVuLCFkU",
	"fyjeDPkZy2ibRtIucrGXEWFrqfWR5QRYrj0tk6xelZIl3PsAvU7MHuLibRhi9/eyIZzFQlWqSFmSUCgv",
	"HHEj4eGMbPywe9tfOmfV48MGPw/ay4SXu4NKHHcAx5cbU4vHIzupFk55kv/7eiGCBBzrRaDBaZkYEua0",
	"QJxThy5Fe4ouPFoUugE3LqHEBRRwiQP+nvJTRcd7dPvx3WQ3F4znUNbnj5EGnZNrvOitNiw2DVgbFpVp",
	"dTlCyyFXVrsBnh/L0Fl5eFyNMvUWudiIxhCKZCrkyrS+nHRyJ3nZv9v+H7R8DBz7zv8pKvsj/4+j8xKM",
	"nACmj4O0HUdGfxG9+PVVeMGGwbdUQw4bZuvy2UxaNf3d6PWVVDQtjH+kdX8FAAD//+uJtsO6DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
